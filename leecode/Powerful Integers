970. Powerful Integers 

Given two non-negative integers x and y, an integer is powerful if it is equal to x^i + y^j for some integers i >= 0 and j >= 0.

Return a list of all powerful integers that have value less than or equal to bound.

You may return the answer in any order.  In your answer, each value should occur at most once.

 

Example 1:

Input: x = 2, y = 3, bound = 10
Output: [2,3,4,5,7,9,10]
Explanation: 
2 = 2^0 + 3^0
3 = 2^1 + 3^0
4 = 2^0 + 3^1
5 = 2^1 + 3^1
7 = 2^2 + 3^1
9 = 2^3 + 3^0
10 = 2^0 + 3^2
Example 2:

Input: x = 3, y = 5, bound = 15
Output: [2,4,6,8,10,14]
 

Note:

1 <= x <= 100
1 <= y <= 100
0 <= bound <= 10^6

网址：https://leetcode.com/contest/weekly-contest-118/problems/powerful-integers/

解题思路：
时间复杂度为（c_i_max *　ｃ＿ｊ＿ｍａｘ）；空间复杂度为（c_i_max ×　ｃ＿ｊ＿ｍａｘ　）
coding：
class Solution {
public:
    vector<int> powerfulIntegers(int x, int y, int bound) {
    vector<int> ret ;
    vector<int> x_ret ;
    vector<int> y_ret ;
    int mid ;
    if ( x > y )
    {
        mid = x ;
        x = y ;
        y = mid ;
    }

    int c_i_max = 0 , c_j_max = 0;
    int init_x = pow(x , c_i_max) , init_y = pow(y , c_j_max) ;
    if ( x == 1 )
    {
        c_i_max = 1;
        x_ret.push_back(1);
    }
     else
     {
        while ( init_x <= bound )
        {
            x_ret.push_back(int (init_x) ) ;
            c_i_max ++ ;
            init_x = pow(x , c_i_max);
        }
     }
    if ( y == 1 )
    {
        c_j_max = 1;
        y_ret.push_back(1);
    }
    else
    {
        while ( init_y <= bound )
        {
            y_ret.push_back(int (init_y) ) ;
            c_j_max ++ ;
            init_y = pow( y , c_j_max );
        }
    }

    int t_i , t_j ;
    int plus_add ;
    for ( t_i = 0 ; t_i < c_i_max ; t_i ++ )
    {
        for ( t_j = 0 ; t_j < c_j_max ; t_j ++ )
        {
            plus_add = x_ret[t_i] + y_ret[t_j];
            if ( plus_add <= bound )
                ret.push_back(plus_add) ;
            else
                break ;
        }

    }//
    sort( ret.begin() , ret.end() ) ;
    ret.erase( unique( ret.begin(), ret.end() ) , ret.end());
    return ret;
    }
};
