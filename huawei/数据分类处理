题目描述
信息社会，有海量的数据需要分析处理，比如公安局分析身份证号码、 QQ 用户、手机号码、银行帐号等信息及活动记录。  
采集输入大数据和分类规则，通过大数据分类处理程序，将大数据分类输出。
﻿
输入描述:
﻿一组输入整数序列I和一组规则整数序列R，I和R序列的第一个整数为序列的个数（个数不包含第一个整数）；整数范围为0~0xFFFFFFFF，序列个数不限
输出描述:
﻿从R依次中取出R<i>，对I进行处理，找到满足条件的I<j>： 
I<j>整数对应的数字需要连续包含R<i>对应的数字。比如R<i>为23，I<j>为231，那么I<j>包含了R<i>，条件满足 。 
按R<i>从小到大的顺序:
(1)先输出R<i>； 
(2)再输出满足条件的I<j>的个数； 
(3)然后输出满足条件的I<j>在I序列中的位置索引(从0开始)； 
(4)最后再输出I<j>。 
附加条件： 
(1)R<i>需要从小到大排序。相同的R<i>只需要输出索引小的以及满足条件的I<j>，索引大的需要过滤掉 
(2)如果没有满足条件的I<j>，对应的R<i>不用输出 
(3)最后需要在输出序列的第一个整数位置记录后续整数序列的个数(不包含“个数”本身)
 
序列I：15,123,456,786,453,46,7,5,3,665,453456,745,456,786,453,123（第一个15表明后续有15个整数） 
序列R：5,6,3,6,3,0（第一个5表明后续有5个整数） 
输出：30, 3,6,0,123,3,453,7,3,9,453456,13,453,14,123,6,7,1,456,2,786,4,46,8,665,9,453456,11,456,12,786
说明：
30----后续有30个整数
3----从小到大排序，第一个R<i>为0，但没有满足条件的I<j>，不输出0，而下一个R<i>是3
6--- 存在6个包含3的I<j> 
0--- 123所在的原序号为0 
123--- 123包含3，满足条件

网址：https://www.nowcoder.com/practice/9a763ed59c7243bd8ab706b2da52b7fd?tpId=37&tqId=21248&tPage=2&rp=&ru=/ta/huawei&qru=/ta/huawei/question-ranking

解题思路：
首先对R里面的数据排序去重，然后查找，push_back(); 注意： 遇到一个bug就是输入数据就是多组；
时间复杂度：O（R.size（）*I.size（））

coding：
#include<iostream>
#include<string>
#include<algorithm>
#include<stdlib.h>
#include<vector>
using namespace std;
vector<int> R_I_insert(string *str_I, int* int_R, int I_size, int local)
{
    vector<int> data;
    int c_i = 0;
    string tmp = to_string(int_R[local]);
    while (c_i < I_size)
    {
        if (str_I[c_i].find(tmp) != -1)
        {
            data.push_back(c_i);
            data.push_back(atoi(str_I[c_i].c_str()));
        }

        c_i ++;
    }
    if (data.size() != 0)
    {
        int tmp_i = data.size() >> 1;
        data.insert(data.begin(),int_R[local]);
        data.insert(data.begin() + 1,tmp_i);
    }
    return data;

}
int main ()
{
    int I_num;
    while (cin >> I_num)
    {
        int c_i = 0;
        string *str_I = new string[I_num];
        while (c_i < I_num)
            cin >> str_I[c_i ++];
        int R_num;
        cin >> R_num;
        int *int_R = new int[R_num];
        c_i = 0;
        while (c_i < R_num)
            cin >> int_R[c_i ++];
        sort(int_R, int_R + R_num);
        int *int_R_Copy = new int[R_num];
        c_i = 1;
        int_R_Copy[0] = int_R[0];
        int c_j = 1;
        while (c_i < R_num)
        {
            if (int_R[c_i] != int_R[c_i - 1])
                int_R_Copy[c_j ++] = int_R[c_i];
            c_i ++;
        }
        vector<int>ret_show;
        c_i = 0;
        while (c_i < c_j)
        {
            vector<int> tmp_vec;
            tmp_vec = R_I_insert(str_I, int_R_Copy, I_num, c_i);
            if (tmp_vec.size() != 0)
                ret_show.insert(ret_show.end(), tmp_vec.begin(), tmp_vec.end());
            c_i ++;
        }
        int tmp_size = ret_show.size();
        ret_show.insert(ret_show.begin(),tmp_size);

        c_i = 0;
        while (c_i < ret_show.size())
        {
            if (c_i == 0)
                cout << ret_show[c_i];
            else
                cout << ' ' << ret_show[c_i];
            c_i ++;
        }
        cout << endl;

    }


    return 0;

}


