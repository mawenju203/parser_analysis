题目描述
酒店房间的价格录入是通过时间段来录入的，比如10月1日至10月7日800元，10月8日至10月20日500元，请实现以下函数int[][] merge(int[][] dateRangePrices)，输入是某个酒店多个日期段的价格，每个日期段（终止日期大于等于起始日期）和对应的价格使用长度为3的数组来表示，比如[0, 19, 300], [10, 40, 250]分别表示从某天开始第1天到第20天价格都是300，第11天到第41天价格都是250，这些日期端有可能重复，重复的日期的价格以后面的为准， 请以以下规则合并并输出合并结果：
1.相邻两天的价格如果相同，那么这两个日期段应该合并
2.合并的结果应该以起始日期从小到大排序
输入描述:
输入数据包括多行，如样例输入所示。
输出描述:
输出数据为一行，如样例输出所示
示例1
输入
复制
1 1 100
2 3 100
4 5 110
输出
复制
[1, 3, 100],[4, 5, 110]


网址：https://www.nowcoder.com/practice/01cb04dc53f54625834f2a86c519dce9?tpId=85&&tqId=29887&rp=1&ru=/activity/oj&qru=/ta/2017test/question-ranking

解题思路：
切分线段；

coding：
#include<iostream>
#include<vector>
#include<limits.h>
 
#include<iomanip>
using namespace std;
template <typename T>
void  printVecVector(vector<vector<T>> data)
{
    int c_i = 0 ;
    cout << '[' << data[c_i][0] << ", " << data[c_i][1] << ", " << data[c_i][2]  << ']' ;
    c_i ++ ;
    while (c_i < data.size())
    {
        cout << ",[" << data[c_i][0] << ", " << data[c_i][1] << ", " << data[c_i][2]  << ']' ;
        c_i ++ ;
    }
    cout << endl ;
}
int main() {
    int startNum , endNum , value ;
    vector<vector<int>> data ;
    vector<int> newInt ;
    newInt.push_back(0) ;
    newInt.push_back(INT_MAX) ;
    newInt.push_back(0) ;
    data.push_back(newInt) ;
    int c_i ;
    int lenVec ;
    while (cin >> startNum >> endNum >> value)
    {
        lenVec = data.size() ;
        c_i = lenVec - 1 ;
        while (c_i > -1)
        {
            if (data[c_i][1] == endNum)
            {
                if (data[c_i][0] == startNum)
                {
                    data[c_i][2] = value ;
                    break ;
                }
                else if (data[c_i][0] > startNum)
                {
                    data[c_i][2] = value ;
                    endNum = data[c_i][0] - 1 ;
                    c_i -- ;
                }
                else
                {
                    newInt.clear() ;
                    newInt.push_back(startNum) ;
                    newInt.push_back(data[c_i][1]) ;
                    newInt.push_back(value) ;
                    data.insert(data.begin() + c_i + 1 , newInt) ;
                    data[c_i][1] = startNum - 1 ;
                    break ;
                }
            }//while - if
            else
            {
                if (data[c_i][0] > endNum)
                    c_i -- ;
                else
                {
                    newInt.clear() ;
                    newInt.push_back(endNum + 1) ;
                    newInt.push_back(data[c_i][1]) ;
                    newInt.push_back(data[c_i][2]) ;
                    data.insert(data.begin() + c_i + 1 , newInt) ;
                    data[c_i][1] = endNum ;
                }
            }
            //printVecVector(data) ;
        }//while
    }
        lenVec = data.size() ;
        c_i = lenVec - 1 ;
        while (c_i > -1)
        {
            if (data[c_i][2] == 0)
                data.erase(data.begin() + c_i) ;
            c_i -- ;
        }
        c_i = data.size() - 1 ;
        while (c_i > 0)
        {
            if ((data[c_i][0] <= data[c_i - 1][1] + 1) && (data[c_i][2] == data[c_i - 1][2]))
            {
                data[c_i - 1][1] = data[c_i][1] ;
                data.erase(data.begin() + c_i) ;
            }
            c_i -- ;
 
        }
        printVecVector(data) ;
    return 0 ;
}
