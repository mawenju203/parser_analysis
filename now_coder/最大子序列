题目描述
对于字符串x和y, 如果擦除x中的某些字母(有可能全擦掉或者都不擦)能够得到y,我们就称y是x的子序列。例如."ncd"是"nowcoder"的子序列,而"xt"不是。
现在对于给定的一个字符串s,请计算出字典序最大的s的子序列。
输入描述:
输入包括一行,一个字符串s,字符串s长度length(1 ≤ length ≤ 50).
s中每个字符都是小写字母
输出描述:
输出一个字符串,即字典序最大的s的子序列。

网址：https://www.nowcoder.com/practice/17ba5b5df1fc49ca8d6cf8ea407b1972?tpId=90&&tqId=30901&rp=1&ru=/activity/oj&qru=/ta/2018test/question-ranking

解题思路：
动态规划的思想；
判断条件：dp[c_i] = dp[c_i] > dp[c_j] ? dp[c_i] : dp[c_j] ; c_j = [0 ,  c_i) ;
时间复杂度为O(n*n) ；空间复杂度为O(n)；
coding：
#include<iostream>
#include<vector>
#include<string>
using namespace std ;
int main()
{
    string str , tmp ;
    vector<string> dp(50 , "") ;
    int c_i , c_j ;
    while (cin >> str)
    {
        dp[0] += str[0] ;
        for (c_i = 1 ; c_i < str.length() ; c_i ++)
        {
            dp[c_i] += str[c_i] ;
            for (c_j = c_i - 1 ; c_j > -1 ; c_j --)
            {
                if (str[c_i] > str[c_j])
                {
                    tmp = dp[c_j];
                    tmp.pop_back() ;
                    tmp += str[c_i] ;
                }
                else
                    tmp = dp[c_j] + str[c_i] ;
                dp[c_i] = dp[c_i] > tmp ?  dp[c_i] : tmp ;
            }
        }
        cout << dp[c_i - 1] << endl;
        c_i = 0 ;
        while (c_i < str.length())
            dp[c_i ++] = "" ;

    }
    return 0 ;
}
