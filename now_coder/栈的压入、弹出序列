输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
（注意：这两个序列的长度是相等的）

网址：https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&tqId=11174&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking

解题思路：
首先就是循环判断stack 的 栈顶元素是否和popV[current]相等；“!=” 则继续向栈中添加元素；直至 pushV.size == c_i 终止；
然后根据stack是否为空 stack.empty（）;然后判断是否为弹出序列；
时间复杂度：O(2n)；空间复杂度：O(n)；

coding：
class Solution {
public:
    bool IsPopOrder(vector<int> pushV,vector<int> popV) {
        if(pushV.empty() || popV.empty() || pushV.size()!=popV.size()){
            return false;
        }
        stack<int> s;
        int j=0;
        for(int i=0;i<pushV.size();i++){
            s.push(pushV[i]);
            while(!s.empty() && s.top()==popV[j]){
                s.pop();
                j++;
            }
        }
        if(s.empty())
            return true;
        return false;
    }
};
