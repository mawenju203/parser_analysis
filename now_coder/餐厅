题目描述
某餐馆有n张桌子，每张桌子有一个参数：a 可容纳的最大人数； 有m批客人，每批客人有两个参数:b人数，c预计消费金额。 在不允许拼桌的情况下，请实现一个算法选择其中一部分客人，使得总预计消费金额最大
输入描述:
输入包括m+2行。 第一行两个整数n(1 <= n <= 50000),m(1 <= m <= 50000) 第二行为n个参数a,即每个桌子可容纳的最大人数,以空格分隔,范围均在32位int范围内。 接下来m行，每行两个参数b,c。分别表示第i批客人的人数和预计消费金额,以空格分隔,范围均在32位int范围内。
输出描述:
输出一个整数,表示最大的总预计消费金额


网址：https://www.nowcoder.com/practice/d2cced737eb54a3aa550f53bb3cc19d0?tpId=85&&tqId=29859&rp=4&ru=/activity/oj&qru=/ta/2017test/question-ranking
解题思想：不选择动态规划时间复杂度太高；
首先是按照每组人员人员的消费金额（如果消费金额相同，人数越少越好）；然后查找最适合这组人员的桌子；从而可以求出最大获利；
时间复杂度：O(nlog n)；空间复杂度为O(n + m)；

coding：
#include<iostream>
#include<algorithm>
#include<set>
using namespace std;
struct group_dinner{
int b_i;
int c_money;
};
bool judge_max(group_dinner A, group_dinner B)
{
    if (A.c_money == B.c_money)
        return A.b_i < B.b_i;
    return A.c_money > B.c_money;
}
int main()
{
    int n,m;
    while (cin >> n >> m)
    {
        long long ret = 0;
        multiset<int> capacity;
        int c_i = 0;
        while (c_i < n)
        {
            int tmp;
            cin >> tmp;
            capacity.insert(tmp);
            c_i ++;
        }
        group_dinner * group = new group_dinner[m];
        c_i = 0;
        while (c_i < m)
        {
            cin >> group[c_i].b_i >> group[c_i].c_money;
            c_i ++;
        }
        sort(group, group + m, judge_max);
        c_i = 0;
        while (c_i < m)
        {
            if (capacity.empty())
                break;
            if (group[c_i].b_i <= *capacity.rbegin())
            {
                ret += group[c_i].c_money;
                capacity.erase(capacity.lower_bound(group[c_i].b_i));
            }
            c_i ++;
        }
        cout << ret << endl;

    }

    return 0;
}
