题目描述
如果一个数列S满足对于所有的合法的i,都有S[i + 1] = S[i] + d, 这里的d也可以是负数和零,我们就称数列S为等差数列。
小易现在有一个长度为n的数列x,小易想把x变为一个等差数列。小易允许在数列上做交换任意两个位置的数值的操作,并且交换操作允许交换多次。但是有些数列通过交换还是不能变成等差数列,小易需要判别一个数列是否能通过交换操作变成等差数列
输入描述:
输入包括两行,第一行包含整数n(2 ≤ n ≤ 50),即数列的长度。
第二行n个元素x[i](0 ≤ x[i] ≤ 1000),即数列中的每个整数。
输出描述:
如果可以变成等差数列输出"Possible",否则输出"Impossible"。

网址：https://www.nowcoder.com/practice/e11bc3a213d24fc1989b21a7c8b50c3f?tpId=90&tqId=30781&tPage=1&rp=1&ru=/ta/2018test&qru=/ta/2018test/question-ranking

解题思路一：
首先是对数组排序，然后求出理论等差的差值d；然后判断按照计算相邻的两个数值的差值是否为d；
时间复杂为O(nlogn)，空间复杂度为O(n)；

解题思路二：
首先是找到数组排序最大值和最小值，然后求出理论等差的差值d；每次循环查找 cur =  前一个值 + d 是否存在，循环次数为 n - 1；
时间复杂为O(nlogn)，空间复杂度为O(n)；

coding 1：
int D_value()
{
    int n ;
    vector<int> data ;
    int tmp ;
    while (cin >> n)
    {
        int c_i = 0 ;
        while (c_i ++ < n)
        {
            cin >> tmp ;
            data.push_back(tmp) ;
        }
        sort(data.begin() , data.end()) ;
        int dvalue =  data.back() - data.front() ;

        if (dvalue % (n - 1))
            cout << "Impossible" << endl ;
        else
        {
            dvalue /= (n -1) ;
            c_i = 1 ;
            while (c_i < n)
            {
                if (data[c_i] - data[c_i - 1] != dvalue)
                {
                    cout << "Impossible" << endl ;
                    break ;
                }
                c_i ++ ;
            }
            if (c_i == n)
                cout << "Possible" << endl ;
        }
        data.clear() ;
    }
    return 0 ;
}

coding 2:
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std ;
int main()
{
    int n ;
    vector<int> data ;
    int tmp ;
    int MinNum , MaxNum ;
    while (cin >> n)
    {
        int c_i = 0 ;
        while (c_i ++ < n)
        {
            cin >> tmp ;
            data.push_back(tmp) ;
        }
        MinNum = data.front() ;
        MaxNum = data.back() ;
        for (int tmpNum : data)
        {
            if (tmpNum < MinNum)
                MinNum = tmpNum ;
            if (tmpNum > MaxNum)
                MaxNum = tmpNum ;
        }
        
        if ((MaxNum - MinNum) % (n - 1))
            cout << "Impossible" << endl ;
        else
        {
            int dValue = (MaxNum - MinNum) / (n - 1);
            c_i = 1 ;
            int cur = MinNum ;
            while (c_i < n)
            {
                cur += dValue ;
                if (find (data.begin() , data.end() , cur) == data.end())
                {
                    cout << "Impossible" << endl ;
                    break ;
                } 
                c_i ++ ;
            }
            if (c_i == n)
                cout << "Possible" << endl ;
        }
        data.clear() ;
    }
    return 0 ;
}
